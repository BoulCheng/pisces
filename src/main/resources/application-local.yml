server:
  port: 8080

spring:
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    consumer:
      group-id: group1
      auto-offset-reset: earliest
  redis:
    host: r-2ze9747215da5814.redis.rds.aliyuncs.com
    password: Kongge789
    pool:
      max-active: 5
      max-idle: 5
      max-wait: 30000
    port: 6379
    timeout: 30000
  redisson:
    #redis链接地址
    address: redis://${spring.redis.host}:${spring.redis.port}
    #当前处理核数量 * 2
    thread: 4
    #指定编解码
    codec: org.redisson.codec.JsonJacksonCodec
    #最小空闲连接数,默认值:10,最小保持连接数（长连接）
    connectionMinimumIdleSize: 12
    #连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，
    #而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉
    idleConnectionTimeout: 10000
    #ping节点超时,单位：毫秒,默认1000
    pingTimeout: 1000
    #连接等待超时,单位：毫秒,默认10000
    connectTimeout: 10000
    #命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时
    timeout: 3000
    #命令失败重试次数，默认值:3
    retryAttempts: 2
    #命令重试发送时间间隔，单位：毫秒,默认值:1500
    retryInterval: 1500
    #重新连接时间间隔，单位：毫秒,默认值：3000;连接断开时，等待与其重新建立连接的时间间隔
    reconnectionTimeout: 3000
    #执行失败最大次数, 默认值：3；失败后直到 reconnectionTimeout超时以后再次尝试。
    failedAttempts: 2
    #身份验证密码
    password: ${spring.redis.password}
    #单个连接最大订阅数量，默认值：5
    subscriptionsPerConnection: 5
    #客户端名称
    clientName: redissonClient
    #发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。#长期保持一定数量的发布订阅连接是必须的
    subscriptionConnectionMinimumIdleSize: 1
    #发布和订阅连接池大小，默认值：50
    subscriptionConnectionPoolSize: 50
    #连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩
    connectionPoolSize: 64
    #数据库编号，默认值：0
    database: 0
    #是否启用DNS监测，默认值：false
    dnsMonitoring: false
  application:
    name: pisces-local

eureka:
  client:
    service-url:
      defaultZone: http://helloEureka:zhimakaimen@eureka-in-dev.dian.so:8181/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    # 续约到期时间（默认90秒）
    lease-expiration-duration-in-seconds: 30
    # 续约更新时间间隔（默认30秒）
    lease-renewal-interval-in-seconds: 10

druid:
  datasource:
    mysql:
      url: jdbc:postgresql://pg-dev.dian.so:5432/dx2
      #      url: jdbc:postgresql://dx2-real-pg.dian.so:1921/dx2
      username: dx2
      password: helloword
      driver-class-name: org.postgresql.Driver
      initial-size: 1
      min-idle: 5
      max-active: 5
      max-wait: 60000
      testOnBorrow: false
      testOnReturn: false
      testWhileIdle: true
      timeBetweenEvictionRunsMillis: 60000
      validationQuery: SELECT 1 FROM DUAL
      filters: 'stat,wall,slf4j'
    dx2:
      url: jdbc:postgresql://pg-dev.dian.so:5432/dx2
#      url: jdbc:postgresql://dx2-real-pg.dian.so:1921/dx2
      username: dx2
      password: helloword
      driver-class-name: org.postgresql.Driver
      initial-size: 1
      min-idle: 5
      max-active: 5
      max-wait: 60000
      testOnBorrow: false
      testOnReturn: false
      testWhileIdle: true
      timeBetweenEvictionRunsMillis: 60000
      validationQuery: SELECT 1
      filters: 'stat,wall,slf4j'
    tidb:
      platform: POSTGRESQL
      url: jdbc:postgresql://pg-dev.dian.so:5432/dx2
      username: dx2
      password: helloword
      driver-class-name: org.postgresql.Driver
      initial-size: 1
      min-idle: 5
      max-active: 5
      max-wait: 60000
      testOnBorrow: false
      testOnReturn: false
      testWhileIdle: true
      timeBetweenEvictionRunsMillis: 60000
      validationQuery: SELECT 1
      filters: 'stat,wall,slf4j'

swagger:
  enable: true